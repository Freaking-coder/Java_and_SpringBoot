OBJECT ORIENTED PROGRAMMING LANGUAGE

OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.

Object-oriented programming has several advantages over procedural programming:

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the Java code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time

A class is a template for objects, and an object is an instance of a class.

When the individual objects are created, they inherit all the variables and methods from the class.

Java Classes/Objects
Java is an object-oriented programming language.

Everything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.

A Class is like an object constructor, or a "blueprint" for creating objects.

Java Constructors
A constructor in Java is a special method that is used to initialize objects.

The constructor is called when an object of a class is created.

Java this Keyword
The this keyword in Java refers to the current object in a method or constructor.

The this keyword is often used to avoid confusion when class attributes have the same name as method or constructor parameters.

Calling a Constructor from Another Constructor
You can also use this() to call another constructor in the same class

The public keyword is an access modifier, meaning that it is used to set the access level for classes, attributes, methods and constructors.

We divide modifiers into two groups:

Access Modifiers - controls the access level
Non-Access Modifiers - do not control access level, but provides other functionality

Non-Access Modifiers
Non-access modifiers do not control visibility (like public or private), but instead add other features to classes, methods, and attributes.

The most commonly used non-access modifiers are final, static, and abstract.
Abstract
An abstract method belongs to an abstract class, and it does not have a body.

Encapsulation
The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:

declare class variables/attributes as private
provide public get and set methods to access and update the value of a private variable
The get method returns the value of the variable name.

The set method takes a parameter (newName) and assigns it to the name variable. 


SAMPLE PROGRAM USING OOPS
public class Student {
    String name;
    int id;
    int marks;

    // Constructor
    public Student(String name, int id, int marks) {
        this.name = name;
        this.id = id;
        this.marks = marks;
    }

    public String calculateGrade() {
        if (marks >= 90) return "A";
        else if (marks >= 80) return "B";
        else if (marks >= 70) return "C";
        else return "D";
    }

    public void printDetails() {
        System.out.println("Name: " + name + ", ID: " + id +
                           ", Marks: " + marks + ", Grade: " + calculateGrade());
    }
}

public class Main {
    public static void main(String[] args) {
        Student s1 = new Student("Pavithra", 101, 92);
        Student s2 = new Student("Rahul", 102, 83);
        Student s3 = new Student("Anita", 103, 67);

        s1.printDetails();
        s2.printDetails();
        s3.printDetails();
    }
}





