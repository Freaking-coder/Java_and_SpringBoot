JRE-Java runtime Environment
  This is a runtime environment which is used to create a environment that executes the java program.
JVM-Java Virtual Machine
  This is a abstract machine which compiles tehe byte code .that is[.class file].
JDK-Java Development Kit
  Java development kit is the combination of JRE ,tools,debugging and compiler(.javac) which is used to execute the Java files.

WHY JAVA?
  Java is the most powerful programming language in todays world.
  It is robust and can able to run in windows,linux,mac etc(Platform independent).
  It is easy to learn and simple to use
  It is open-source and free
  It is secure, fast and powerful.
  Java is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs.

  ****Sample Program Structure****
public class Main {
  public static void main(String[] args) {
    System.out.println("Hello World");
  }
}

Every line of code that runs in Java must be inside a class. The class name should always start with an uppercase first letter. In our example, we named the class Main.
Note: Java is case-sensitive. MyClass and myclass would be treated as two completely different names.
The name of the Java file must match the class name. So if your class is called Main, the file must be saved as Main.java. This is because Java uses the class name to find and run your code. If the names don't match, Java will give an error and the program will not run.
  
System is a built-in Java class.
out is a member of System, short for "output".
println() is a method, short for "print line".
Finally, remember that each Java statement must end with a semicolon (;).

Normally, we use // for short comments, and /* */ for longer.

Variables are containers for storing data values.

In Java, there are different types of variables, for example:

String - stores text, such as "Hello". String values are surrounded by double quotes
int - stores integers (whole numbers), without decimals, such as 123 or -123
float - stores floating point numbers, with decimals, such as 19.99 or -19.99
char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
boolean - stores values with two states: true or false

To create a variable in Java, you need to:

Choose a type (like int or String)
Give the variable a name (like x, age, or name)
Optionally assign it a value using =
Here's the basic syntax:

Syntax
type variableName = value;

If you don't want others (or yourself) to overwrite existing values, use the final keyword (this will declare the variable as "final" or "constant", which means unchangeable and read-only):

Example
final int myNum = 15;
myNum = 20; 

Identifiers

All Java variables must be identified with unique names.

These unique names are called identifiers.
Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVol)
Widening Casting
Widening casting is done automatically when passing a smaller size type into a larger size type.

This works because there is no risk of losing information. For example, an int value can safely fit inside a double:
Narrowing Casting
Narrowing casting must be done manually by placing the type in parentheses () in front of the value.

This is required because narrowing may result in data loss (for example, dropping decimals when converting a double to an int):

Java Operators
Operators are used to perform operations on variables and values.
Java divides the operators into the following groups:

Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Bitwise operators

Arithmetic Operators
Arithmetic operators are used to perform common mathematical operations.

Incrementing and Decrementing
Incrementing and decrementing are very common in programming, especially when working with counters, loops, and arrays (which you will learn more about in later chapters).

The ++ operator increases a value by 1, while the -- operator decreases a value by 1:

Assignment Operators
Assignment operators are used to assign values to variables.

Comparison Operators
Comparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.

The return value of a comparison is either true or false. These values are known as Boolean values, and you will learn more about them in the Booleans and If..Else chapter.

Logical Operators
As with comparison operators, you can also test for true or false values with logical operators.

Logical operators are used to determine the logic between variables or values, by combining multiple conditions:

Order of Operations
Here are some common operators, from highest to lowest priority:

() - Parentheses
*, /, % - Multiplication, Division, Modulus
+, - - Addition, Subtraction
>, <, >=, <= - Comparison
==, != - Equality
&& - Logical AND
|| - Logical OR
= - Assignment

Java Strings
Strings are used for storing text.

A String variable contains a collection of characters surrounded by double quotes:

Java Conditions and If Statements
Conditions and if statements let you control the flow of your program - deciding which code runs, and which code is skipped.

Think of it like real life: If it rains, take an umbrella. Otherwise, do nothing.

Every if statement needs a condition that results in true or false.
The else Statement
The else statement lets you run a block of code when the condition in the if statement is false.
The else if Statement
Use the else if statement to specify a new condition if the first condition is false.

Syntax
if (condition1) {
  // block of code to be executed if condition1 is true
} else if (condition2) {
  // block of code to be executed if the condition1 is false and condition2 is true
} else {
  // block of code to be executed if the condition1 is false and condition2 is false
}

There is also a short-hand if else, which is known as the ternary operator because it consists of three operands.

It can be used to replace multiple lines of code with a single line, and is most often used to replace simple if else statements:

SyntaxGet your own Java Server
variable = (condition) ? expressionTrue :  expressionFalse;

Nested If
You can also place an if statement inside another if. This is called a nested if statement.

A nested if lets you check for a condition only if another condition is already true.
Syntax
if (condition1) {
  // code to run if condition1 is true
  if (condition2) {
    // code to run if both condition1 and condition2 are true
  }
}

Logical Operators in Conditions
You can combine or reverse conditions using logical operators. These work together with if, else, and else if to build more complex decisions.

&& (AND) - all conditions must be true
|| (OR) - at least one condition must be true
! (NOT) - reverses a condition (true = false, false = true)
AND (&&)
Use AND (&&) when both conditions must be true:
OR (||)
Use OR (||) when at least one of the conditions can be true:

Java Switch Statements
Instead of writing many if..else statements, you can use the switch statement.

Loops
Loops can execute a block of code as long as a specified condition is true.

Loops are handy because they save time, reduce errors, and they make code more readable.

The Do/While Loop
The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true. Then it will repeat the loop as long as the condition is true. 

Condition is False from the Start
In the while loop chapter, we saw that if the condition is false at the beginning, the loop never runs at all.

The do/while loop is different: it will always run the code block at least once, even if the condition is false from the start.

Java For Loop
When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:

SyntaxGet your own Java Server
for (statement 1; statement 2; statement 3) {
  // code block to be executed
}
Statement 1 is executed (one time) before the execution of the code block.

Statement 2 defines the condition for executing the code block.

Statement 3 is executed (every time) after the code block has been executed.

Nested Loops
It is also possible to place a loop inside another loop. This is called a nested loop.

The "inner loop" will be executed one time for each iteration of the "outer loop":

The for-each Loop
There is also a "for-each" loop, which is used exclusively to loop through elements in an array (or other data structures):

Syntax
for (type variableName : arrayName) {
  // code block to be executed
}
Break
You have already seen the break statement used in an earlier chapter of this tutorial. It was used to "jump out" of a switch statement.

The break statement can also be used to jump out of a loop.

Continue
The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

A method is a block of code which only runs when it is called.

You can pass data, known as parameters, into a method.

Methods are used to perform certain actions, and they are also known as functions.

Parameters and Arguments
Information can be passed to methods as a parameter. Parameters act as variables inside the method.

Parameters are specified after the method name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma.

Java Scope
In Java, variables are only accessible inside the region where they are created. This is called scope.
    Class,Method,Loop Scope




  
